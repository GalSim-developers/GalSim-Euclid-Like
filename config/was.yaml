# Default settings for euclidlike simulation
# Includes creation of noisless oversampled images (including PSF)
#  -- processing of other detector and instrument effects are still handled in the
#     python postprocessing layer to enable things not currently in euclidlike

modules:

    # Including euclidlike in the list of modules to import will add a number of Euclid-specific
    # functions and classes that we will use here.
    - euclidlike_imsim
    - euclidlike

    # We need this for one of our Eval items.  GalSim does not by default import datetime into
    # the globals dict it uses when evaluating Eval items, so we can tell it to import it here.
    - datetime

# Variables used to request LSST flux in the output catalog
eval_variables:
    frubin_area:
        type : Eval
        str : '3.14159 * (418**2 - 255**2)'
    frubin_exptime: 30

# Define some other information about the images
image:

    # A special Image type that knows all the Euclid CCD geometry, WCS, gain, etc.
    # It also by default applies a number of detector effects, but these can be turned
    # off if desired by setting some parameters (given below) to False.
    type: euclidlike_ccd

    wcs:
        type: EuclidlikeWCS
        CCD: '@image.CCD'
        ra: { type: ObSeqData, field: ra }
        dec: { type: ObSeqData, field: dec }
        pa: { type: ObSeqData, field: pa }
        saa: { type: ObSeqData, field: saa }
        mjd: { type: ObSeqData, field: mjd }

    bandpass:
        type: EuclidlikeBandpass
        name: { type: ObSeqData, field: filter }

    # When you want to have multiple images generate the same random galaxies, then
    # you can set up multiple random number generators with different update cadences
    # by making random_seed a list.
    # The default behavior is just to have the random seeds for each object go in order by
    # object number across all images, but this shows how to set it up so we use two separate
    # cadences.
    # The first one behaves normally, which will be used for things like noise on the image.
    # The second one sets the initial seed for each object to repeat to the same starting value
    # at the start of each filter.  If we were doing more than 3 total files, it would then
    # move on to another sequence for the next 3 and so on.
    random_seed:
        # Used for noise and nobjects.
        - '@input.obseq_data.visit'

        # Used for objects.  Repeats sequence for each filter
        # Note: Don't use $ shorthand here, since that will implicitly be evaluated once and then
        # treated the same way as an integer (i.e. making a regular sequence starting from that
        # value).  Using an explicit dict with an Eval type means GalSim will leave it alone and
        # evaluate it as is for each object.


    # We're just doing one CCD here.
    # If you wanted to do all of them in each of three filters (given below), you could use:
    #
    # CCD:
    #     type: Sequence
    #     first: 0
    #     last: 35
    #     repeat: 0  # repeat each CCD num 0 times before moving on, for the 3 filters.
    #
    CCD: 1
    mjd: { type: ObSeqData, field: mjd }
    filter: { type: ObSeqData, field: filter }
    exptime: { type: ObSeqData, field: exptime }

    # Photon shooting is way faster for chromatic objects than fft, especially when most of them
    # are fairly faint.  The cross-over point for achromatic objects is generally of order
    # flux=1.e6 or so (depending on the profile).  Most of our objects here are much fainter than
    # that.  The fft rendering for chromatic is a factor of 10 or so slower still, whereas
    # chromatic photon shooting is only slighly slower than achromatic, so the difference
    # is even more pronounced in this case.
    draw_method: 'auto'

    # If "use_noise" is False, none of the noise sources will be added to the image.
    # If "use_noise" is True, it will add sky background and associated noise.
    use_noise: True
    # stray_light: False          # Not yet implemented
    # thermal_background: False   # Not yet implemented
    # reciprocity_failure: False  # Not yet implemented
    # dark_current: False         # Not yet implemented
    # nonlinearity: False         # Not yet implemented
    # ipc: False                  # Not yet implemented
    read_noise: True
    quantization_noise: True
    sky_subtract: False

    # nobjects: 1

stamp:
    type: Euclidlike_stamp
    world_pos:
        type: SkyCatWorldPos
    exptime: { type: ObSeqData, field: exptime }
    # photon_ops:
    #     -
    #         type: ChargeDiff

# Define the galaxy type and positions to use
gal:
    type: SkyCatObj

input:
    obseq_data:
        file_name: euclidlike_imsim/data/euclid_obseq.pkl
        visit: 10307
        obs_kind: "VIS_LONG"
        CCD: '@image.CCD'
    euclidlike_psf:
        CCD: '@image.CCD'
        n_waves: 5
    sky_catalog:
        file_name: /path/to/skyCatalog.yaml
        edge_pix: 512
        mjd: { type: ObSeqData, field: mjd }
        exptime: { type: ObSeqData, field: exptime }          
        obj_types: ['diffsky_galaxy','star','snana']

output:

    nfiles: 1
    dir: /path/to/output/images
    file_name:
        type: FormattedStr
        format: "Euclidlike_WAS_truth_%s_%i_%i.fits.gz"
        items:
            - { type: ObSeqData, field: filter }
            - { type: ObSeqData, field: visit }
            - '@image.CCD'

    noise_image:
        dir: /path/to/output/noise_images
        file_name:
            type: FormattedStr
            format: "Euclidlike_WAS_truth_%s_%i_%i.noise.fits.gz"
            items:
                - { type: ObSeqData, field: filter }
                - { type: ObSeqData, field: visit }
                - '@image.CCD'

    sky_image:
        dir: /path/to/output/sky_images
        file_name:
            type: FormattedStr
            format: "Euclidlike_WAS_truth_%s_%i_%i.sky.fits.gz"
            items:
                - { type: ObSeqData, field: filter }
                - { type: ObSeqData, field: visit }
                - '@image.CCD'

    weight_image:
        dir: /path/to/output/weight_images
        file_name:
            type: FormattedStr
            format: "Euclidlike_WAS_truth_%s_%i_%i.weight.fits.gz"
            items:
                - { type: ObSeqData, field: filter }
                - { type: ObSeqData, field: visit }
                - '@image.CCD'

    truth:
        dir: /path/to/output/truth
        file_name:
            type: FormattedStr
            format: "Euclidlike_WAS_index_%s_%i_%i.txt"
            items:
                - { type: ObSeqData, field: filter }
                - { type: ObSeqData, field: visit }
                - '@image.CCD'
        columns:
            object_id: "@object_id"
            ra: "$sky_pos.ra.deg"
            dec: "$sky_pos.dec.deg"
            x: "$image_pos.x"
            y: "$image_pos.y"
            realized_flux: "@realized_flux"
            flux: "@flux"
            mag: "@mag"
            obj_type: "@object_type"
            gal_disk_hlr: { type: SkyCatValue, field: diskHalfLightRadiusArcsec }
            gal_redshift: { type: SkyCatValue, field: redshift }
            sn_host_id: { type: SkyCatValue, field: host_id }
            lsst_flux_r:
                type : Eval
                fflux : { type: SkyCatValue, field: lsst_flux_r }
                str : 'flux * rubin_exptime * rubin_area'
            lsst_mag_r:
                type : Eval
                fflux : { type: SkyCatValue, field: lsst_flux_r }
                str : "-2.5 * np.log10(@output.truth.columns.lsst_flux_r) + 28.36"
